
pipeline {
    agent {
        label  'label3'
    }
    tools {
        maven 'maven_3.9' 
     
    }

 
    stages {
        stage('checkout') {
            
            steps {
                // Get some code from a GitHub repository
                git credentialsId: 'GITHUB_ID' ,
                    branch: 'master',
                    url: 'https://github.com/sangamesh001/privaterepo.git'
            }

        }
        
        stage('build'){
            steps{
            
            sh script : 'mvn package'
            }
        }
        
        stage('unit test'){
            steps{
            
            junit  testResults : '**/surefire-reports/TEST-*.xml'
            }
        }
        
        
         stage('sonaranalysis'){

            environment {
                SONAR_URL = 'https://sonarcloud.io/'
                PROJECT_KEY= 'sonarscan0_myproject'
                organization= 'sonarscan0'
            }
            steps{
                withCredentials([string(credentialsId: 'sonarqube', variable: 'TOKEN')]) {
               sh 'mvn clean package sonar:sonar -Dsonar.token=$TOKEN -Dsonar.projectKey=$PROJECT_KEY -Dsonar.host.url=$SONAR_URL -Dsonar.organization=$organization'
                }
            }
         }
         
            // steps{
        //     // performing sonarqube analysis with "withSonarQubeENV(<Name of Server configured in Jenkins>)"
        //         withSonarQubeEnv('sonarqube') {
        //         // requires SonarQube Scanner for Maven 3.2+
        //             sh 'mvn clean package sonar:sonar -Dsonar.organization=sonarscan0 -Dsonar.token=78e792ed3f8887990605edeffc88aa6386a53ab2 -Dsonar.projectKey=sonarscan0_myproject'
        // }
            
        // }

           stage('dockerimage build'){
            steps{
                sh script: 'docker image build -t sangamesh00/myrepo:$BUILD_NUMBER .'
            }
           }

           stage('docker login'){
            environment {
                DOCKERHUB_CREDENTIALS= credentials ('DOCKER_HUB')
            }
            steps{
                sh script: 'echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin'
            }
           }

           stage('docker push'){
            steps{
            sh script: 'docker image push sangamesh00/myrepo:$BUILD_NUMBER'
            }
           }

    }

     post{
    always {  
      sh 'docker logout'           
    }      
    }  

}
       
        
           
          
    

        
        
        
        
                
        
        

    








